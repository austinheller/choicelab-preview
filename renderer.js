!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.app=t():e.app=t()}(global,(()=>(()=>{"use strict";var e={418:e=>{
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/
var t=Object.getOwnPropertySymbols,n=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;function o(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,a){for(var c,i,u=o(e),l=1;l<arguments.length;l++){for(var s in c=Object(arguments[l]))n.call(c,s)&&(u[s]=c[s]);if(t){i=t(c);for(var f=0;f<i.length;f++)r.call(c,i[f])&&(u[i[f]]=c[i[f]])}}return u}},408:(e,t,n)=>{
/** @license React v17.0.2
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var r=n(418),o=60103,a=60106;t.Fragment=60107,t.StrictMode=60108,t.Profiler=60114;var c=60109,i=60110,u=60112;t.Suspense=60113;var l=60115,s=60116;if("function"==typeof Symbol&&Symbol.for){var f=Symbol.for;o=f("react.element"),a=f("react.portal"),t.Fragment=f("react.fragment"),t.StrictMode=f("react.strict_mode"),t.Profiler=f("react.profiler"),c=f("react.provider"),i=f("react.context"),u=f("react.forward_ref"),t.Suspense=f("react.suspense"),l=f("react.memo"),s=f("react.lazy")}var p="function"==typeof Symbol&&Symbol.iterator;function d(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},y={};function m(e,t,n){this.props=e,this.context=t,this.refs=y,this.updater=n||h}function v(){}function g(e,t,n){this.props=e,this.context=t,this.refs=y,this.updater=n||h}m.prototype.isReactComponent={},m.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(d(85));this.updater.enqueueSetState(this,e,t,"setState")},m.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},v.prototype=m.prototype;var b=g.prototype=new v;b.constructor=g,r(b,m.prototype),b.isPureReactComponent=!0;var w={current:null},E=Object.prototype.hasOwnProperty,_={key:!0,ref:!0,__self:!0,__source:!0};function S(e,t,n){var r,a={},c=null,i=null;if(null!=t)for(r in void 0!==t.ref&&(i=t.ref),void 0!==t.key&&(c=""+t.key),t)E.call(t,r)&&!_.hasOwnProperty(r)&&(a[r]=t[r]);var u=arguments.length-2;if(1===u)a.children=n;else if(1<u){for(var l=Array(u),s=0;s<u;s++)l[s]=arguments[s+2];a.children=l}if(e&&e.defaultProps)for(r in u=e.defaultProps)void 0===a[r]&&(a[r]=u[r]);return{$$typeof:o,type:e,key:c,ref:i,props:a,_owner:w.current}}function j(e){return"object"==typeof e&&null!==e&&e.$$typeof===o}var O=/\/+/g;function R(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function x(e,t,n,r,c){var i=typeof e;"undefined"!==i&&"boolean"!==i||(e=null);var u=!1;if(null===e)u=!0;else switch(i){case"string":case"number":u=!0;break;case"object":switch(e.$$typeof){case o:case a:u=!0}}if(u)return c=c(u=e),e=""===r?"."+R(u,0):r,Array.isArray(c)?(n="",null!=e&&(n=e.replace(O,"$&/")+"/"),x(c,t,n,"",(function(e){return e}))):null!=c&&(j(c)&&(c=function(e,t){return{$$typeof:o,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(c,n+(!c.key||u&&u.key===c.key?"":(""+c.key).replace(O,"$&/")+"/")+e)),t.push(c)),1;if(u=0,r=""===r?".":r+":",Array.isArray(e))for(var l=0;l<e.length;l++){var s=r+R(i=e[l],l);u+=x(i,t,n,s,c)}else if(s=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=p&&e[p]||e["@@iterator"])?e:null}(e),"function"==typeof s)for(e=s.call(e),l=0;!(i=e.next()).done;)u+=x(i=i.value,t,n,s=r+R(i,l++),c);else if("object"===i)throw t=""+e,Error(d(31,"[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t));return u}function k(e,t,n){if(null==e)return e;var r=[],o=0;return x(e,r,"","",(function(e){return t.call(n,e,o++)})),r}function C(e){if(-1===e._status){var t=e._result;t=t(),e._status=0,e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}if(1===e._status)return e._result;throw e._result}var L={current:null};function P(){var e=L.current;if(null===e)throw Error(d(321));return e}var N={ReactCurrentDispatcher:L,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:w,IsSomeRendererActing:{current:!1},assign:r};t.Children={map:k,forEach:function(e,t,n){k(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return k(e,(function(){t++})),t},toArray:function(e){return k(e,(function(e){return e}))||[]},only:function(e){if(!j(e))throw Error(d(143));return e}},t.Component=m,t.PureComponent=g,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=N,t.cloneElement=function(e,t,n){if(null==e)throw Error(d(267,e));var a=r({},e.props),c=e.key,i=e.ref,u=e._owner;if(null!=t){if(void 0!==t.ref&&(i=t.ref,u=w.current),void 0!==t.key&&(c=""+t.key),e.type&&e.type.defaultProps)var l=e.type.defaultProps;for(s in t)E.call(t,s)&&!_.hasOwnProperty(s)&&(a[s]=void 0===t[s]&&void 0!==l?l[s]:t[s])}var s=arguments.length-2;if(1===s)a.children=n;else if(1<s){l=Array(s);for(var f=0;f<s;f++)l[f]=arguments[f+2];a.children=l}return{$$typeof:o,type:e.type,key:c,ref:i,props:a,_owner:u}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:i,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:c,_context:e},e.Consumer=e},t.createElement=S,t.createFactory=function(e){var t=S.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:u,render:e}},t.isValidElement=j,t.lazy=function(e){return{$$typeof:s,_payload:{_status:-1,_result:e},_init:C}},t.memo=function(e,t){return{$$typeof:l,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return P().useCallback(e,t)},t.useContext=function(e,t){return P().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return P().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return P().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return P().useLayoutEffect(e,t)},t.useMemo=function(e,t){return P().useMemo(e,t)},t.useReducer=function(e,t,n){return P().useReducer(e,t,n)},t.useRef=function(e){return P().useRef(e)},t.useState=function(e){return P().useState(e)},t.version="17.0.2"},294:(e,t,n)=>{e.exports=n(408)}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var a=t[r]={exports:{}};return e[r](a,a.exports,n),a.exports}n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var r={};return(()=>{function e(e,t){var n=localStorage.getItem("choicelab_viewer");n||localStorage.setItem("choicelab_viewer",JSON.stringify({}));var r=JSON.parse(n);void 0!==e&&void 0!==t&&(r[e]=t),localStorage.setItem("choicelab_viewer",JSON.stringify(r))}function t(e){var t=localStorage.getItem("choicelab_viewer");return t?JSON.parse(t)[e]:null}n.r(r);var o=t("zoom");function a(){var t=parseFloat(o)+.2;t>1.2&&(t=1.2),t=parseFloat(t).toFixed(1);var n=document.querySelector("#flowchart");n.style.transform="scale(".concat(t,")"),n.style.transition="transform 0.2s ease",setTimeout((function(){n.style.transition="none"}),200),o=t,e("zoom",t)}function c(){var t=parseFloat(o)-.2;t<.35&&(t=.35),t=parseFloat(t).toFixed(2);var n=document.querySelector("#flowchart");n.style.transform="scale(".concat(t,")"),n.style.transition="transform 0.2s ease",setTimeout((function(){n.style.transition="none"}),200),o=t,e("zoom",t)}var i=0,u=0;function l(){var t=document.querySelector("#flowchart");window.addEventListener("wheel",(function(n){n.ctrlKey&&(e("zoom",o-=.0015*n.deltaY),window.requestAnimationFrame((function(){o<.35&&(o=.35),o>1.2&&(o=1.2);var n="scale(".concat(o,")");e("zoom",o),t.style.transform=n})))}))}function s(e){var t,n,r=window.sessionStorage.getItem("projectPath"),o="scene",a=[];if(e.comments&&e.comments.length>0){for(var c=0;c<e.comments.length;c++){var i=e.comments[c],u="comment-".concat(c);a.push(React.createElement("li",{key:u},i))}t=React.createElement("ul",{className:"comments"},a)}var l,s,f,p=[];function d(t){var n=e.actions[t],o="action-".concat(t),a="";switch(n.type){case"text":if(""!==n.content.trim()){var c=document.createElement("div");Choicelab.convertTextToHTML(n.content).forEach((function(e){c.appendChild(e)})),a=c.innerHTML}break;case"audio":var i=r+"/"+n.src;a=React.createElement("audio",{src:i,controls:!0});break;case"cc":a=React.createElement("p",{className:"caption"},n.text);break;case"response":a=React.createElement("div",null,React.createElement("span",{className:"type"},"Response:"),React.createElement("audio",{src:n.src,controls:!0}));break;case"input":var u=[],l=0;n.inputs.forEach((function(e){var t="input-".concat(l);"button"===e.type?u.push(React.createElement("button",{key:t,value:e.value},e.label)):u.push(React.createElement("input",{key:t,type:e.type,value:e.value})),l++})),a=React.createElement(React.Fragment,null,React.createElement("span",{className:"type"},React.createElement("span",{className:"icon"},"⑃ "),React.createElement("span",{className:"input"},n.name)),React.createElement("form",null,u));break;default:a=React.createElement("span",{className:"noDisplay"},n.type)}"text"===n.type?p.push(React.createElement("li",{key:o,"data-action":n.type,dangerouslySetInnerHTML:{__html:a}})):p.push(React.createElement("li",{key:o,"data-action":n.type},a))}for(var h=0;h<e.actions.length;h++)d(h);if(n=React.createElement("ul",{className:"actions"},p),e.rules&&(l=React.createElement("div",{className:"rules"},e.rules,"?"),o+=" has-rules"),e.goto){s=e.goto,o+=" goto";var y="#path-".concat(s);f=React.createElement("div",{className:"goto"},React.createElement("a",{className:"goto-link","data-goto":e.goto,href:y},React.createElement("i",{className:"icon-path fa-solid fa-code-branch"}),React.createElement("i",{className:"icon-goto fa-solid fa-arrow-right"})," ",s)),void 0!==e.gotoPrevious&&(o+=" previous-scene-is-goto"),void 0!==e.gotoNext&&(o+=" next-scene-is-goto")}return React.createElement("li",{className:o,id:([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g,(function(e){return(e^crypto.getRandomValues(new Uint8Array(1))[0]&15>>e/4).toString(16)})),"data-goto":s},React.createElement("div",{className:"contents"},l,t,n,f))}function f(e){for(var t=[],n=0;n<Choicelab.files.length;n++){var r=Choicelab.files[n];t.push({path:r,scenes:[]})}function o(e){for(var n=0;n<t.length;n++)if(t[n].path===e)return n}for(n=1;n<Choicelab.scenes.length;n++){var a=Choicelab.scenes[n],c="scene-".concat(n),i=a.file.name,u=t[o(i)],l=void 0,f=void 0;n>1&&(l=Choicelab.scenes[n-1].goto),n!==Choicelab.scenes.length-1&&(f=Choicelab.scenes[n+1].goto),u.scenes.push(React.createElement(s,{key:c,gotoPrevious:l,gotoNext:f,goto:a.goto,rules:a.rules,actions:a.actions,comments:a.comments}))}var p=[];for(n=0;n<t.length;n++){u=t[n],c="path-".concat(u.path);p.push(React.createElement("ul",{className:"path",id:c,"data-path":u.path,key:c},u.scenes))}return React.createElement("div",{id:"scene-inventory"},React.createElement("ul",{id:"paths"},p))}document.addEventListener("pointermove",(function(e){i=e.x/window.innerWidth,u=e.y/window.innerHeight,console.log(i,u)}));var p=n(294);function d(e){return d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},d(e)}function h(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function y(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function m(e,t,n){return t&&y(e.prototype,t),n&&y(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e}function v(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&g(e,t)}function g(e,t){return g=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},g(e,t)}function b(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=_(e);if(t){var o=_(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return w(this,n)}}function w(e,t){if(t&&("object"===d(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return E(e)}function E(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function _(e){return _=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},_(e)}function S(){window.electron.openExternal("http://localhost:8000")}var j=function(e){v(n,e);var t=b(n);function n(e){return h(this,n),t.call(this,e)}return m(n,[{key:"render",value:function(){return p.createElement("div",{id:"navigation"},p.createElement("button",{id:"zoom-out",onClick:c},p.createElement("i",{className:"fa-solid fa-magnifying-glass-minus"})),p.createElement("button",{id:"zoom-out",onClick:a},p.createElement("i",{className:"fa-solid fa-magnifying-glass-plus"})),p.createElement("button",{id:"open-browser",onClick:S},p.createElement("i",{className:"fa-solid fa-eye"})))}}]),n}(p.Component);p.Component;function O(e){return p.createElement("div",{id:"toolbar"},p.createElement(j,null))}function R(e){var t,n=0,r=0,o=0,a=0,c=R.offsetBase;if(!c&&document.body&&((c=R.offsetBase=document.createElement("div")).style.cssText="position:absolute;left:0;top:0",document.body.appendChild(c)),e&&e.ownerDocument===document&&"getBoundingClientRect"in e&&c){var i=e.getBoundingClientRect(),u=c.getBoundingClientRect();t=!0,n=i.left-u.left,r=i.top-u.top,o=i.right-i.left,a=i.bottom-i.top}return{found:t,left:n,top:r,width:o,height:a,right:n+o,bottom:r+a}}function x(e){var t=e.paths[e.pathName].el.querySelectorAll(".scene");e.paths[e.pathName].added=!0;var n=[],r=0;function o(){var t=document.createElement("div");t.classList.add("goto-row"),t.classList.add("count-".concat(n.length)),n.forEach((function(e){t.appendChild(e)})),e.container.appendChild(t),n.length=0}t.forEach((function(a){if(a.classList.contains("goto")){var c=a.getAttribute("data-goto"),i=e.paths[c];if(n.push(a),!1===i.added){a.classList.add("embed-goto");var u=document.createElement("ul");u.classList.add("path"),u.setAttribute("data-path",c),a.appendChild(u),x({container:u,paths:e.paths,pathName:c})}}else{n.length>0&&o();var l=document.createElement("div");l.classList.add("row");var s=[],f=t[r+1];if(f){if(f.classList.contains("goto")){for(var p=!1,d=0;d<t.length;d++)if(!(d<r+1)){var h=t[d];if(h.classList.contains("goto"))s.push(h.getAttribute("id"));else{if(!1!==p)break;p=!0,s.push(h.getAttribute("id"))}}}else s.push(f.getAttribute("id"));a.setAttribute("data-connect-to",s.toString())}l.appendChild(a),e.container.appendChild(l)}r++})),n.length>0&&o()}function k(){var e=document.querySelector("#flowchart"),t={};document.querySelectorAll(".path").forEach((function(e){var n=e.getAttribute("data-path");t[n]={name:n,added:!1,el:e}})),x({container:e,paths:t,pathName:"start"}),document.querySelectorAll(".path-label").forEach((function(e){})),setTimeout((function(){document.querySelectorAll(".scene").forEach((function(e){var t=e.getAttribute("data-connect-to");if(t){var n=t.split(","),r=R(e),o=r.left-8+r.width/2,a=r.top+r.height-10;n.forEach((function(t){var n=R(document.getElementById(t)),r=n.left-8+n.width/2,c=n.top,i=document.createElementNS("http://www.w3.org/2000/svg","svg"),u=document.createElementNS("http://www.w3.org/2000/svg","line");i.classList.add("line"),i.setAttribute("data-connect",t),u.setAttribute("stroke-width",1.5),i.style.top=0,i.style.left=0,i.style.width="100%",i.style.height="100%",u.setAttribute("y1",a+10),u.setAttribute("y2",c),u.setAttribute("x1",o-8),u.setAttribute("x2",r-8),i.appendChild(u),e.parentNode.appendChild(i)}))}}))}),50)}function C(e){return C="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},C(e)}function L(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function P(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function N(e,t){return N=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},N(e,t)}function A(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=I(e);if(t){var o=I(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return T(this,n)}}function T(e,t){if(t&&("object"===C(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function I(e){return I=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},I(e)}function q(){/*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */q=function(){return e};var e={},t=Object.prototype,n=t.hasOwnProperty,r="function"==typeof Symbol?Symbol:{},o=r.iterator||"@@iterator",a=r.asyncIterator||"@@asyncIterator",c=r.toStringTag||"@@toStringTag";function i(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{i({},"")}catch(e){i=function(e,t,n){return e[t]=n}}function u(e,t,n,r){var o=t&&t.prototype instanceof f?t:f,a=Object.create(o.prototype),c=new S(r||[]);return a._invoke=function(e,t,n){var r="suspendedStart";return function(o,a){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw a;return O()}for(n.method=o,n.arg=a;;){var c=n.delegate;if(c){var i=w(c,n);if(i){if(i===s)continue;return i}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if("suspendedStart"===r)throw r="completed",n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r="executing";var u=l(e,t,n);if("normal"===u.type){if(r=n.done?"completed":"suspendedYield",u.arg===s)continue;return{value:u.arg,done:n.done}}"throw"===u.type&&(r="completed",n.method="throw",n.arg=u.arg)}}}(e,n,c),a}function l(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=u;var s={};function f(){}function p(){}function d(){}var h={};i(h,o,(function(){return this}));var y=Object.getPrototypeOf,m=y&&y(y(j([])));m&&m!==t&&n.call(m,o)&&(h=m);var v=d.prototype=f.prototype=Object.create(h);function g(e){["next","throw","return"].forEach((function(t){i(e,t,(function(e){return this._invoke(t,e)}))}))}function b(e,t){function r(o,a,c,i){var u=l(e[o],e,a);if("throw"!==u.type){var s=u.arg,f=s.value;return f&&"object"==C(f)&&n.call(f,"__await")?t.resolve(f.__await).then((function(e){r("next",e,c,i)}),(function(e){r("throw",e,c,i)})):t.resolve(f).then((function(e){s.value=e,c(s)}),(function(e){return r("throw",e,c,i)}))}i(u.arg)}var o;this._invoke=function(e,n){function a(){return new t((function(t,o){r(e,n,t,o)}))}return o=o?o.then(a,a):a()}}function w(e,t){var n=e.iterator[t.method];if(void 0===n){if(t.delegate=null,"throw"===t.method){if(e.iterator.return&&(t.method="return",t.arg=void 0,w(e,t),"throw"===t.method))return s;t.method="throw",t.arg=new TypeError("The iterator does not provide a 'throw' method")}return s}var r=l(n,e.iterator,t.arg);if("throw"===r.type)return t.method="throw",t.arg=r.arg,t.delegate=null,s;var o=r.arg;return o?o.done?(t[e.resultName]=o.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=void 0),t.delegate=null,s):o:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,s)}function E(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function _(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function S(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(E,this),this.reset(!0)}function j(e){if(e){var t=e[o];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,a=function t(){for(;++r<e.length;)if(n.call(e,r))return t.value=e[r],t.done=!1,t;return t.value=void 0,t.done=!0,t};return a.next=a}}return{next:O}}function O(){return{value:void 0,done:!0}}return p.prototype=d,i(v,"constructor",d),i(d,"constructor",p),p.displayName=i(d,c,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===p||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,d):(e.__proto__=d,i(e,c,"GeneratorFunction")),e.prototype=Object.create(v),e},e.awrap=function(e){return{__await:e}},g(b.prototype),i(b.prototype,a,(function(){return this})),e.AsyncIterator=b,e.async=function(t,n,r,o,a){void 0===a&&(a=Promise);var c=new b(u(t,n,r,o),a);return e.isGeneratorFunction(n)?c:c.next().then((function(e){return e.done?e.value:c.next()}))},g(v),i(v,c,"Generator"),i(v,o,(function(){return this})),i(v,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var t=[];for(var n in e)t.push(n);return t.reverse(),function n(){for(;t.length;){var r=t.pop();if(r in e)return n.value=r,n.done=!1,n}return n.done=!0,n}},e.values=j,S.prototype={constructor:S,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(_),!e)for(var t in this)"t"===t.charAt(0)&&n.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function r(n,r){return c.type="throw",c.arg=e,t.next=n,r&&(t.method="next",t.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var a=this.tryEntries[o],c=a.completion;if("root"===a.tryLoc)return r("end");if(a.tryLoc<=this.prev){var i=n.call(a,"catchLoc"),u=n.call(a,"finallyLoc");if(i&&u){if(this.prev<a.catchLoc)return r(a.catchLoc,!0);if(this.prev<a.finallyLoc)return r(a.finallyLoc)}else if(i){if(this.prev<a.catchLoc)return r(a.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return r(a.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var c=a?a.completion:{};return c.type=e,c.arg=t,a?(this.method="next",this.next=a.finallyLoc,s):this.complete(c)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),s},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),_(n),s}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;_(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,n){return this.delegate={iterator:j(e),resultName:t,nextLoc:n},"next"===this.method&&(this.arg=void 0),s}},e}function F(e,t,n,r,o,a,c){try{var i=e[a](c),u=i.value}catch(e){return void n(e)}i.done?t(u):Promise.resolve(u).then(r,o)}function $(e){return function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function c(e){F(a,r,o,c,i,"next",e)}function i(e){F(a,r,o,c,i,"throw",e)}c(void 0)}))}}function M(){return B.apply(this,arguments)}function B(){return(B=$(q().mark((function e(){return q().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,window.electron.openFile();case 2:D(e.sent),window.location.reload();case 5:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function D(e){window.sessionStorage.setItem("projectPath",e)}document.addEventListener("DOMContentLoaded",(function(){var n=function(){document.querySelector("#recent-projects");var n=t("recent_projects"),r=!1;if(n){r=document.createElement("select"),0===n.length&&r.setAttribute("disabled","disabled");var o=document.createElement("option");o.innerText="Open Recent",r.appendChild(o),n.forEach((function(e){var t=function(e){var t=e.split(/([^\\^/]+)/g),n=[];return t.forEach((function(e){""!==e.trim()&&"/"!==e&&"\\"!==e&&n.push(e)})),n[n.length-1]}(e),n=document.createElement("option");n.setAttribute("value",e),n.innerText=t,r.appendChild(n)}));var a=document.createElement("option");a.innerText="–",a.setAttribute("disabled","disabled"),r.appendChild(a);var c=document.createElement("option");c.innerText="Clear Menu",c.value="_clearMenu",r.appendChild(c)}else e("recent_projects",n=[]);return r}();document.querySelector("#recent-projects").appendChild(n),n.addEventListener("change",(function(t){var n=t.target.value;"_clearMenu"===n?e("recent_projects",[]):(D(n),window.electron.selectProject(n)),window.location.reload()}))})),document.getElementById("btn").addEventListener("click",$(q().mark((function e(){return q().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:M();case 1:case"end":return e.stop()}}),e)})))),document.addEventListener("DOMContentLoaded",(function(){var e;null!==(e=window.sessionStorage.getItem("projectPath"))&&"undefined"!==e&&""!==e&&(Choicelab.create({projectPath:e,stage:"#root",electron:!0}),document.body.classList.add("project-loaded"))})),Choicelab.on("scenesParsed","loadViewer",(function(){var n=t("recent_projects");n||(n=[]);var r=window.sessionStorage.getItem("projectPath");n.includes(r)||n.push(r),e("recent_projects",n);var i=function(n){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&N(e,t)}(p,React.Component);var r,i,u,s=A(p);function p(){return L(this,p),s.apply(this,arguments)}return r=p,(i=[{key:"render",value:function(){return React.createElement(React.Fragment,null,React.createElement(O,null),React.createElement("div",{id:"flowchart"}),React.createElement(f,null))}},{key:"componentDidMount",value:function(){k(),setTimeout((function(){document.querySelector("html").style.scrollBehavior="smooth"}),1e3),setInterval((function(){var e,t;e="scroll_position",t={x:window.scrollX,y:window.scrollY},window.sessionStorage.setItem(e,JSON.stringify(t))}),1e3);var n,r,i=(n="scroll_position",(r=window.sessionStorage.getItem(n))?JSON.parse(r):null);if(null!==i)window.scrollTo(i.x,i.y);else{window.electron.resizeWindowForProject();var u=document.querySelector("#flowchart > div:first-of-type .scene > .contents");if(u){var s=R(u);window.scrollTo(s.left-600,0)}}document.querySelectorAll(".actions button").forEach((function(e){e.addEventListener("click",(function(e){e.preventDefault()}))})),l();var f=t("zoom")?t("zoom"):1;e("zoom",f),setTimeout((function(){var t;t=f,t=parseFloat(t).toFixed(1),document.querySelector("#flowchart").style.transform="scale(".concat(t,")"),o=t,e("zoom",t)}),50),document.addEventListener("keydown",(function(e){"Equal"===e.code&&(!0!==e.ctrlKey&&!0!==e.metaKey||(e.preventDefault(),a())),"Minus"===e.code&&(!0!==e.ctrlKey&&!0!==e.metaKey||(e.preventDefault(),c()))})),document.querySelectorAll(".goto-link").forEach((function(e){e.addEventListener("click",(function(t){t.preventDefault();var n,r,o,a,c=e.getAttribute("data-goto"),i=document.querySelector('.embed-goto[data-goto="'.concat(c,'"]'));n=45,r=R(i),o=r.top-n,a=r.left,window.scrollTo({top:o,left:a,behavior:"smooth"}),console.log(e,i)}))}))}}])&&P(r.prototype,i),u&&P(r,u),Object.defineProperty(r,"prototype",{writable:!1}),p}();ReactDOM.render(React.createElement(i,null),document.getElementById("root"))}))})(),r})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,